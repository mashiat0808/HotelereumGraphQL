type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BatchMetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _fromTokenId: BigInt! # uint256
  _toTokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BookingResold @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  seller: Bytes! # address
  owner: Bytes! # address
  bidding: Boolean! # bool
  splittable: Boolean! # bool
  startingPrice: BigInt! # uint256
  sold: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EnrollmentLog @entity(immutable: true) {
  id: Bytes!
  hotelId: BigInt! # uint256
  ownerWallet: Bytes! # address
  crudStatus: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type InventoryItemCreated @entity(immutable: true) {
  id: Bytes!
  propertyId: BigInt! # uint256
  hotelId: BigInt! # uint256
  price: BigInt! # uint256
  currency: String! # string
  isOccupied: Boolean! # bool
  inventoryType: Int! # uint8
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketItemCreated @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  seller: Bytes! # address
  owner: Bytes! # address
  resell: Boolean! # bool
  _reservationDays: [BigInt!]! # uint256[]
  _marketType: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketItemPayemt @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  owner: Bytes! # address
  price: BigInt! # uint256
  currency: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PrimaryRevenueDistributed @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  platformFee: BigInt! # uint256
  hotelFee: BigInt! # uint256
  totalPaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SecondaryRevenueDistributed @entity(immutable: true) {
  id: Bytes!
  platformAddress: Bytes! # address
  tokenId: BigInt! # uint256
  platformFee: BigInt! # uint256
  hotelFee: BigInt! # uint256
  sellerFee: BigInt! # uint256
  totalPaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
