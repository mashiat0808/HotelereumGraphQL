// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BookingResold extends ethereum.Event {
  get params(): BookingResold__Params {
    return new BookingResold__Params(this);
  }
}

export class BookingResold__Params {
  _event: BookingResold;

  constructor(event: BookingResold) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bidding(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get splittable(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get startingPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get sold(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class EnrollmentLog extends ethereum.Event {
  get params(): EnrollmentLog__Params {
    return new EnrollmentLog__Params(this);
  }
}

export class EnrollmentLog__Params {
  _event: EnrollmentLog;

  constructor(event: EnrollmentLog) {
    this._event = event;
  }

  get hotelId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ownerWallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get crudStatus(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class InventoryItemCreated extends ethereum.Event {
  get params(): InventoryItemCreated__Params {
    return new InventoryItemCreated__Params(this);
  }
}

export class InventoryItemCreated__Params {
  _event: InventoryItemCreated;

  constructor(event: InventoryItemCreated) {
    this._event = event;
  }

  get propertyId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get hotelId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currency(): string {
    return this._event.parameters[3].value.toString();
  }

  get isOccupied(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get inventoryType(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class MarketItemCreated extends ethereum.Event {
  get params(): MarketItemCreated__Params {
    return new MarketItemCreated__Params(this);
  }
}

export class MarketItemCreated__Params {
  _event: MarketItemCreated;

  constructor(event: MarketItemCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get resell(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get _reservationDays(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }

  get _marketType(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class MarketItemPayemt extends ethereum.Event {
  get params(): MarketItemPayemt__Params {
    return new MarketItemPayemt__Params(this);
  }
}

export class MarketItemPayemt__Params {
  _event: MarketItemPayemt;

  constructor(event: MarketItemPayemt) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currency(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PrimaryRevenueDistributed extends ethereum.Event {
  get params(): PrimaryRevenueDistributed__Params {
    return new PrimaryRevenueDistributed__Params(this);
  }
}

export class PrimaryRevenueDistributed__Params {
  _event: PrimaryRevenueDistributed;

  constructor(event: PrimaryRevenueDistributed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get platformFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get hotelFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalPaid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SecondaryRevenueDistributed extends ethereum.Event {
  get params(): SecondaryRevenueDistributed__Params {
    return new SecondaryRevenueDistributed__Params(this);
  }
}

export class SecondaryRevenueDistributed__Params {
  _event: SecondaryRevenueDistributed;

  constructor(event: SecondaryRevenueDistributed) {
    this._event = event;
  }

  get platformAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get platformFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get hotelFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sellerFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalPaid(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract__getInventoryDataResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): string {
    return this[1].toString();
  }

  get isOccupied(): boolean {
    return this[2].toBoolean();
  }

  get inventoryType(): i32 {
    return this[3].toI32();
  }
}

export class Contract__getNFTDetailsResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get guest(): Address {
    return this[1].toAddress();
  }

  get hotel(): Address {
    return this[2].toAddress();
  }

  get resell(): boolean {
    return this[3].toBoolean();
  }

  get reservationDays(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get marketType(): i32 {
    return this[5].toI32();
  }
}

export class Contract__getNFTResellDetailsResultValue0Struct extends ethereum.Tuple {
  get parentId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get owner(): Address {
    return this[3].toAddress();
  }

  get bidding(): boolean {
    return this[4].toBoolean();
  }

  get splittable(): boolean {
    return this[5].toBoolean();
  }

  get startingPrice(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Contract__manageInventoryResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Contract__manageInventoryInput_inventoryItemStruct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): string {
    return this[1].toString();
  }

  get isOccupied(): boolean {
    return this[2].toBoolean();
  }

  get inventoryType(): i32 {
    return this[3].toI32();
  }
}

export class Contract__markForResellResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get guest(): Address {
    return this[1].toAddress();
  }

  get hotel(): Address {
    return this[2].toAddress();
  }

  get resell(): boolean {
    return this[3].toBoolean();
  }

  get reservationDays(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get marketType(): i32 {
    return this[5].toI32();
  }
}

export class Contract__unmarkForResellResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get guest(): Address {
    return this[1].toAddress();
  }

  get hotel(): Address {
    return this[2].toAddress();
  }

  get resell(): boolean {
    return this[3].toBoolean();
  }

  get reservationDays(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get marketType(): i32 {
    return this[5].toI32();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePriceInMATIC(
    _hotelId: BigInt,
    _propertyIds: Array<BigInt>,
    _totalDays: BigInt,
  ): BigInt {
    let result = super.call(
      "calculatePriceInMATIC",
      "calculatePriceInMATIC(uint256,uint256[],uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hotelId),
        ethereum.Value.fromUnsignedBigIntArray(_propertyIds),
        ethereum.Value.fromUnsignedBigInt(_totalDays),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculatePriceInMATIC(
    _hotelId: BigInt,
    _propertyIds: Array<BigInt>,
    _totalDays: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePriceInMATIC",
      "calculatePriceInMATIC(uint256,uint256[],uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hotelId),
        ethereum.Value.fromUnsignedBigIntArray(_propertyIds),
        ethereum.Value.fromUnsignedBigInt(_totalDays),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  changeHotelPartnerWallet(_hotelId: BigInt, _ownerWallet: Address): BigInt {
    let result = super.call(
      "changeHotelPartnerWallet",
      "changeHotelPartnerWallet(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hotelId),
        ethereum.Value.fromAddress(_ownerWallet),
      ],
    );

    return result[0].toBigInt();
  }

  try_changeHotelPartnerWallet(
    _hotelId: BigInt,
    _ownerWallet: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "changeHotelPartnerWallet",
      "changeHotelPartnerWallet(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hotelId),
        ethereum.Value.fromAddress(_ownerWallet),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createBookingTwin(
    _bookingID: BigInt,
    _guestAddr: Address,
    _hotelAddr: Address,
    _tokenURI: string,
    _price: BigInt,
    _currency: string,
    _reservationDays: Array<BigInt>,
  ): BigInt {
    let result = super.call(
      "createBookingTwin",
      "createBookingTwin(uint256,address,address,string,uint256,string,uint256[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_bookingID),
        ethereum.Value.fromAddress(_guestAddr),
        ethereum.Value.fromAddress(_hotelAddr),
        ethereum.Value.fromString(_tokenURI),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromString(_currency),
        ethereum.Value.fromUnsignedBigIntArray(_reservationDays),
      ],
    );

    return result[0].toBigInt();
  }

  try_createBookingTwin(
    _bookingID: BigInt,
    _guestAddr: Address,
    _hotelAddr: Address,
    _tokenURI: string,
    _price: BigInt,
    _currency: string,
    _reservationDays: Array<BigInt>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createBookingTwin",
      "createBookingTwin(uint256,address,address,string,uint256,string,uint256[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_bookingID),
        ethereum.Value.fromAddress(_guestAddr),
        ethereum.Value.fromAddress(_hotelAddr),
        ethereum.Value.fromString(_tokenURI),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromString(_currency),
        ethereum.Value.fromUnsignedBigIntArray(_reservationDays),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  enrollHotelPartner(_hotelId: BigInt, _ownerWallet: Address): BigInt {
    let result = super.call(
      "enrollHotelPartner",
      "enrollHotelPartner(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hotelId),
        ethereum.Value.fromAddress(_ownerWallet),
      ],
    );

    return result[0].toBigInt();
  }

  try_enrollHotelPartner(
    _hotelId: BigInt,
    _ownerWallet: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "enrollHotelPartner",
      "enrollHotelPartner(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hotelId),
        ethereum.Value.fromAddress(_ownerWallet),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHotelOwnerWallet(_hotelId: BigInt): Address {
    let result = super.call(
      "getHotelOwnerWallet",
      "getHotelOwnerWallet(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_hotelId)],
    );

    return result[0].toAddress();
  }

  try_getHotelOwnerWallet(_hotelId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getHotelOwnerWallet",
      "getHotelOwnerWallet(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_hotelId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInventoryData(
    _hotelId: BigInt,
    _propertyIds: Array<BigInt>,
  ): Array<Contract__getInventoryDataResultValue0Struct> {
    let result = super.call(
      "getInventoryData",
      "getInventoryData(uint256,uint256[]):((uint256,string,bool,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_hotelId),
        ethereum.Value.fromUnsignedBigIntArray(_propertyIds),
      ],
    );

    return result[0].toTupleArray<Contract__getInventoryDataResultValue0Struct>();
  }

  try_getInventoryData(
    _hotelId: BigInt,
    _propertyIds: Array<BigInt>,
  ): ethereum.CallResult<Array<Contract__getInventoryDataResultValue0Struct>> {
    let result = super.tryCall(
      "getInventoryData",
      "getInventoryData(uint256,uint256[]):((uint256,string,bool,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_hotelId),
        ethereum.Value.fromUnsignedBigIntArray(_propertyIds),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getInventoryDataResultValue0Struct>(),
    );
  }

  getLatestMaticPriceInUSD(): BigInt {
    let result = super.call(
      "getLatestMaticPriceInUSD",
      "getLatestMaticPriceInUSD():(int256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getLatestMaticPriceInUSD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLatestMaticPriceInUSD",
      "getLatestMaticPriceInUSD():(int256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNFTDays(_tokenId: BigInt): Array<BigInt> {
    let result = super.call("getNFTDays", "getNFTDays(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);

    return result[0].toBigIntArray();
  }

  try_getNFTDays(_tokenId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getNFTDays",
      "getNFTDays(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getNFTDetails(_tokenId: BigInt): Contract__getNFTDetailsResultValue0Struct {
    let result = super.call(
      "getNFTDetails",
      "getNFTDetails(uint256):((uint256,address,address,bool,uint256[],uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );

    return changetype<Contract__getNFTDetailsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getNFTDetails(
    _tokenId: BigInt,
  ): ethereum.CallResult<Contract__getNFTDetailsResultValue0Struct> {
    let result = super.tryCall(
      "getNFTDetails",
      "getNFTDetails(uint256):((uint256,address,address,bool,uint256[],uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getNFTDetailsResultValue0Struct>(value[0].toTuple()),
    );
  }

  getNFTResellDetails(
    _tokenId: BigInt,
  ): Contract__getNFTResellDetailsResultValue0Struct {
    let result = super.call(
      "getNFTResellDetails",
      "getNFTResellDetails(uint256):((uint256,uint256,address,address,bool,bool,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );

    return changetype<Contract__getNFTResellDetailsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getNFTResellDetails(
    _tokenId: BigInt,
  ): ethereum.CallResult<Contract__getNFTResellDetailsResultValue0Struct> {
    let result = super.tryCall(
      "getNFTResellDetails",
      "getNFTResellDetails(uint256):((uint256,uint256,address,address,bool,bool,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getNFTResellDetailsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  manageInventory(
    _hotelId: BigInt,
    _propertyId: BigInt,
    _inventoryItem: Contract__manageInventoryInput_inventoryItemStruct,
  ): Contract__manageInventoryResult {
    let result = super.call(
      "manageInventory",
      "manageInventory(uint256,uint256,(uint256,string,bool,uint8)):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hotelId),
        ethereum.Value.fromUnsignedBigInt(_propertyId),
        ethereum.Value.fromTuple(_inventoryItem),
      ],
    );

    return new Contract__manageInventoryResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_manageInventory(
    _hotelId: BigInt,
    _propertyId: BigInt,
    _inventoryItem: Contract__manageInventoryInput_inventoryItemStruct,
  ): ethereum.CallResult<Contract__manageInventoryResult> {
    let result = super.tryCall(
      "manageInventory",
      "manageInventory(uint256,uint256,(uint256,string,bool,uint8)):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hotelId),
        ethereum.Value.fromUnsignedBigInt(_propertyId),
        ethereum.Value.fromTuple(_inventoryItem),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__manageInventoryResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  markForResell(
    _tokenId: BigInt,
    _startingPrice: BigInt,
    _bidding: boolean,
    _splittable: boolean,
  ): Contract__markForResellResultValue0Struct {
    let result = super.call(
      "markForResell",
      "markForResell(uint256,uint256,bool,bool):((uint256,address,address,bool,uint256[],uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_startingPrice),
        ethereum.Value.fromBoolean(_bidding),
        ethereum.Value.fromBoolean(_splittable),
      ],
    );

    return changetype<Contract__markForResellResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_markForResell(
    _tokenId: BigInt,
    _startingPrice: BigInt,
    _bidding: boolean,
    _splittable: boolean,
  ): ethereum.CallResult<Contract__markForResellResultValue0Struct> {
    let result = super.tryCall(
      "markForResell",
      "markForResell(uint256,uint256,bool,bool):((uint256,address,address,bool,uint256[],uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_startingPrice),
        ethereum.Value.fromBoolean(_bidding),
        ethereum.Value.fromBoolean(_splittable),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__markForResellResultValue0Struct>(value[0].toTuple()),
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(id: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toString();
  }

  try_tokenURI(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  unmarkForResell(
    _tokenId: BigInt,
  ): Contract__unmarkForResellResultValue0Struct {
    let result = super.call(
      "unmarkForResell",
      "unmarkForResell(uint256):((uint256,address,address,bool,uint256[],uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );

    return changetype<Contract__unmarkForResellResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_unmarkForResell(
    _tokenId: BigInt,
  ): ethereum.CallResult<Contract__unmarkForResellResultValue0Struct> {
    let result = super.tryCall(
      "unmarkForResell",
      "unmarkForResell(uint256):((uint256,address,address,bool,uint256[],uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__unmarkForResellResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ChangeHotelPartnerWalletCall extends ethereum.Call {
  get inputs(): ChangeHotelPartnerWalletCall__Inputs {
    return new ChangeHotelPartnerWalletCall__Inputs(this);
  }

  get outputs(): ChangeHotelPartnerWalletCall__Outputs {
    return new ChangeHotelPartnerWalletCall__Outputs(this);
  }
}

export class ChangeHotelPartnerWalletCall__Inputs {
  _call: ChangeHotelPartnerWalletCall;

  constructor(call: ChangeHotelPartnerWalletCall) {
    this._call = call;
  }

  get _hotelId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ownerWallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeHotelPartnerWalletCall__Outputs {
  _call: ChangeHotelPartnerWalletCall;

  constructor(call: ChangeHotelPartnerWalletCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateBookingTwinCall extends ethereum.Call {
  get inputs(): CreateBookingTwinCall__Inputs {
    return new CreateBookingTwinCall__Inputs(this);
  }

  get outputs(): CreateBookingTwinCall__Outputs {
    return new CreateBookingTwinCall__Outputs(this);
  }
}

export class CreateBookingTwinCall__Inputs {
  _call: CreateBookingTwinCall;

  constructor(call: CreateBookingTwinCall) {
    this._call = call;
  }

  get _bookingID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _guestAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _hotelAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokenURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _price(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _currency(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _reservationDays(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }
}

export class CreateBookingTwinCall__Outputs {
  _call: CreateBookingTwinCall;

  constructor(call: CreateBookingTwinCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateCryptoBookingTwinCall extends ethereum.Call {
  get inputs(): CreateCryptoBookingTwinCall__Inputs {
    return new CreateCryptoBookingTwinCall__Inputs(this);
  }

  get outputs(): CreateCryptoBookingTwinCall__Outputs {
    return new CreateCryptoBookingTwinCall__Outputs(this);
  }
}

export class CreateCryptoBookingTwinCall__Inputs {
  _call: CreateCryptoBookingTwinCall;

  constructor(call: CreateCryptoBookingTwinCall) {
    this._call = call;
  }

  get _bookingParams(): CreateCryptoBookingTwinCall_bookingParamsStruct {
    return changetype<CreateCryptoBookingTwinCall_bookingParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class CreateCryptoBookingTwinCall__Outputs {
  _call: CreateCryptoBookingTwinCall;

  constructor(call: CreateCryptoBookingTwinCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateCryptoBookingTwinCall_bookingParamsStruct extends ethereum.Tuple {
  get _bookingID(): BigInt {
    return this[0].toBigInt();
  }

  get _guestAddr(): Address {
    return this[1].toAddress();
  }

  get _hotelId(): BigInt {
    return this[2].toBigInt();
  }

  get _propertyIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get _tokenURI(): string {
    return this[4].toString();
  }

  get _price(): BigInt {
    return this[5].toBigInt();
  }

  get _currency(): string {
    return this[6].toString();
  }

  get _reservationDays(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get _marketType(): i32 {
    return this[8].toI32();
  }
}

export class CreateFixMarketSaleCall extends ethereum.Call {
  get inputs(): CreateFixMarketSaleCall__Inputs {
    return new CreateFixMarketSaleCall__Inputs(this);
  }

  get outputs(): CreateFixMarketSaleCall__Outputs {
    return new CreateFixMarketSaleCall__Outputs(this);
  }
}

export class CreateFixMarketSaleCall__Inputs {
  _call: CreateFixMarketSaleCall;

  constructor(call: CreateFixMarketSaleCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateFixMarketSaleCall__Outputs {
  _call: CreateFixMarketSaleCall;

  constructor(call: CreateFixMarketSaleCall) {
    this._call = call;
  }
}

export class CreateSplitMarketSaleCall extends ethereum.Call {
  get inputs(): CreateSplitMarketSaleCall__Inputs {
    return new CreateSplitMarketSaleCall__Inputs(this);
  }

  get outputs(): CreateSplitMarketSaleCall__Outputs {
    return new CreateSplitMarketSaleCall__Outputs(this);
  }
}

export class CreateSplitMarketSaleCall__Inputs {
  _call: CreateSplitMarketSaleCall;

  constructor(call: CreateSplitMarketSaleCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _splitTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _reservationDays(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class CreateSplitMarketSaleCall__Outputs {
  _call: CreateSplitMarketSaleCall;

  constructor(call: CreateSplitMarketSaleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DeleteHotelPartnerCall extends ethereum.Call {
  get inputs(): DeleteHotelPartnerCall__Inputs {
    return new DeleteHotelPartnerCall__Inputs(this);
  }

  get outputs(): DeleteHotelPartnerCall__Outputs {
    return new DeleteHotelPartnerCall__Outputs(this);
  }
}

export class DeleteHotelPartnerCall__Inputs {
  _call: DeleteHotelPartnerCall;

  constructor(call: DeleteHotelPartnerCall) {
    this._call = call;
  }

  get _hotelId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteHotelPartnerCall__Outputs {
  _call: DeleteHotelPartnerCall;

  constructor(call: DeleteHotelPartnerCall) {
    this._call = call;
  }
}

export class EnrollHotelPartnerCall extends ethereum.Call {
  get inputs(): EnrollHotelPartnerCall__Inputs {
    return new EnrollHotelPartnerCall__Inputs(this);
  }

  get outputs(): EnrollHotelPartnerCall__Outputs {
    return new EnrollHotelPartnerCall__Outputs(this);
  }
}

export class EnrollHotelPartnerCall__Inputs {
  _call: EnrollHotelPartnerCall;

  constructor(call: EnrollHotelPartnerCall) {
    this._call = call;
  }

  get _hotelId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ownerWallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EnrollHotelPartnerCall__Outputs {
  _call: EnrollHotelPartnerCall;

  constructor(call: EnrollHotelPartnerCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _maticOracleRoute(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ManageInventoryCall extends ethereum.Call {
  get inputs(): ManageInventoryCall__Inputs {
    return new ManageInventoryCall__Inputs(this);
  }

  get outputs(): ManageInventoryCall__Outputs {
    return new ManageInventoryCall__Outputs(this);
  }
}

export class ManageInventoryCall__Inputs {
  _call: ManageInventoryCall;

  constructor(call: ManageInventoryCall) {
    this._call = call;
  }

  get _hotelId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _propertyId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _inventoryItem(): ManageInventoryCall_inventoryItemStruct {
    return changetype<ManageInventoryCall_inventoryItemStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }
}

export class ManageInventoryCall__Outputs {
  _call: ManageInventoryCall;

  constructor(call: ManageInventoryCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ManageInventoryCall_inventoryItemStruct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): string {
    return this[1].toString();
  }

  get isOccupied(): boolean {
    return this[2].toBoolean();
  }

  get inventoryType(): i32 {
    return this[3].toI32();
  }
}

export class MarkForResellCall extends ethereum.Call {
  get inputs(): MarkForResellCall__Inputs {
    return new MarkForResellCall__Inputs(this);
  }

  get outputs(): MarkForResellCall__Outputs {
    return new MarkForResellCall__Outputs(this);
  }
}

export class MarkForResellCall__Inputs {
  _call: MarkForResellCall;

  constructor(call: MarkForResellCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _startingPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bidding(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _splittable(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class MarkForResellCall__Outputs {
  _call: MarkForResellCall;

  constructor(call: MarkForResellCall) {
    this._call = call;
  }

  get value0(): MarkForResellCallValue0Struct {
    return changetype<MarkForResellCallValue0Struct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }
}

export class MarkForResellCallValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get guest(): Address {
    return this[1].toAddress();
  }

  get hotel(): Address {
    return this[2].toAddress();
  }

  get resell(): boolean {
    return this[3].toBoolean();
  }

  get reservationDays(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get marketType(): i32 {
    return this[5].toI32();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnmarkForResellCall extends ethereum.Call {
  get inputs(): UnmarkForResellCall__Inputs {
    return new UnmarkForResellCall__Inputs(this);
  }

  get outputs(): UnmarkForResellCall__Outputs {
    return new UnmarkForResellCall__Outputs(this);
  }
}

export class UnmarkForResellCall__Inputs {
  _call: UnmarkForResellCall;

  constructor(call: UnmarkForResellCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnmarkForResellCall__Outputs {
  _call: UnmarkForResellCall;

  constructor(call: UnmarkForResellCall) {
    this._call = call;
  }

  get value0(): UnmarkForResellCallValue0Struct {
    return changetype<UnmarkForResellCallValue0Struct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }
}

export class UnmarkForResellCallValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get guest(): Address {
    return this[1].toAddress();
  }

  get hotel(): Address {
    return this[2].toAddress();
  }

  get resell(): boolean {
    return this[3].toBoolean();
  }

  get reservationDays(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get marketType(): i32 {
    return this[5].toI32();
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
